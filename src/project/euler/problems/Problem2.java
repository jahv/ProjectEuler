package project.euler.problems;

import java.util.ArrayList;
import java.util.List;

import project.euler.problems.utils.Utils;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 * 
 * @author jose.hernandez
 *
 */
public class Problem2 {

	/**
	 * Solve problem
	 * 
	 * @param maxValue
	 * @return
	 */
	public static Long solve(final Long maxValue) {
		final List<Long> fibonacciSequenceEvenValues = fibonacciSequenceEvenValues(maxValue);
		return Utils.sumAll(fibonacciSequenceEvenValues);
	}

	/**
	 * Returns list of all Fibonacci numbers less than maxValue
	 * @param maxValue
	 * @return
	 */
	public static List<Long> fibonacciSequenceEvenValues(final Long maxValue) {
		Long i = 1L;
		Long fibonacciNumber = Utils.fibonacci(i);
		final List<Long> fibonacciSequence = new ArrayList<Long>();

		while (fibonacciNumber < maxValue) {
			if (Utils.isEven(fibonacciNumber)) {
				fibonacciSequence.add(fibonacciNumber);
			}
			i++;
			fibonacciNumber = Utils.fibonacci(i);
		}
		return fibonacciSequence;
	}
}
